name: Reusable workflow to build and push image
on:
  workflow_call:
    inputs:
      stage:
        description: "Stage to deploy: *production|staging*"
        required: true
        type: string
      tag_name:
        required: false
        type: string
      major-version:
        required: false
        default: v1
        type: string
      image-name:
        required: true
        type: string
      config-path:
        required: false
        type: string
        description:
          Prefix of name of parameters, usually */config/app_name/production*.
      config-pattern:
        required: false
        type: string
      config-format:
        required: false
        type: string
        default: dotenv
      config-file:
        required: false
        type: string
        description: |
          Name of dotenv file to dump parameters retrieved by *inputs.config-prefix*
      docker-context:
        required: false
        default: .
        type: string
      docker-file:
        required: false
        default: Dockerfile
        type: string
      docker-build-args:
        required: false
        default: Comma or line separated strings
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    outputs:
      release-image:
        description: Release image
        value: ${{jobs.build-image.outputs.release-image}}

jobs:
  build-image:
    name: Build and Push image to ECR
    runs-on: ubuntu-latest
    outputs:
      release-image: ${{steps.vars.outputs.release-image}}
    steps:
    - name: Validate inputs
      run: exit 1
      if: ${{ !contains(fromJSON('["production","staging"]'), inputs.stage) }}
    - uses: actions/checkout@v2
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - uses: aws-actions/amazon-ecr-login@v1
      id: login-ecr
    - name : Prepare target variables
      id: vars
      run: |
        if [ "${{ inputs.stage }}" = "staging" ]; then
          TAG_NAME=staging.$(date +%y%m).${GITHUB_SHA::7}
        elif [ -n "${{ inputs.tag_name }}" ]; then
          TAG_NAME=${{ inputs.tag_name }}
        else
          TAG_NAME=${{inputs.major-version}}.$(date +%y%m).${GITHUB_SHA::7}
        fi
        echo "base-image=${{steps.login-ecr.outputs.registry}}/${{inputs.image-name}}" >> $GITHUB_OUTPUT
        echo "release-image=${{steps.login-ecr.outputs.registry}}/${{inputs.image-name}}:${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "release-version=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "major-version=$(echo ${TAG_NAME} | cut -d. -f1)" >> $GITHUB_OUTPUT
    - name: Prepare .env file
      if: inputs.config-path
      id: dotenv
      uses: nohmad/aws-ssm-parameter-store-action@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        path: ${{inputs.config-path}}
        format: ${{inputs.config-format}}
        filename: ${{inputs.config-file}}
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-layers-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-layers
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
      with:
        install: true
    - name: Build docker image and Push to ECR
      uses: docker/build-push-action@v2
      with:
        context: ${{inputs.docker-context}}
        file: ${{inputs.docker-file}}
        builder: ${{steps.buildx.outputs.name}}
        build-args: ${{inputs.docker-build-args}}
        push: true
        tags: |
          ${{steps.vars.outputs.base-image}}:${{steps.vars.outputs.release-version}}
          ${{steps.vars.outputs.base-image}}:${{steps.vars.outputs.major-version}}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
